#!/usr/bin/env python

#Copyright 2010,2011,2012,2013 Brown University, Providence, RI.

                         #All Rights Reserved

#Permission to use, copy, modify, and distribute this software and its
#documentation for any purpose other than its incorporation into a
#commercial product is hereby granted without fee, provided that the
#above copyright notice appear in all copies and that both that
#copyright notice and this permission notice appear in supporting
#documentation, and that the name of Brown University not be used in
#advertising or publicity pertaining to distribution of the software
#without specific, written prior permission.

#BROWN UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
#INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ANY
#PARTICULAR PURPOSE.  IN NO EVENT SHALL BROWN UNIVERSITY BE LIABLE FOR
#ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#http://cs.brown.edu/people/braphael/software.html

import sys
import os

import random
import math

def measure(genes_collection1, genes_collection2):
	out_g1 = 0
	inside_g1 = 0
	out_g2 = 0
	inside_g2 = 0
	#out = number of covered samples
	for sampleID in sample_mutatedGenes:
		genes_in_sample = sample_mutatedGenes[sampleID]
		inside_genes_1 = genes_collection_1.intersection(genes_in_sample)
		if len(inside_genes_1)>0:
			out_g1 += 1
		num_ig_1 = len(inside_genes_1)
		inside_g1 += num_ig_1
		inside_genes_2 = genes_collection_2.intersection(genes_in_sample)
		if len(inside_genes_2)>0:
			out_g2 += 1
		num_ig_2 = len(inside_genes_2)
		inside_g2 += num_ig_2
	c = 0.5
	return c*float(2*out_g1 - inside_g1 - (2*out_g2 - inside_g2))

def measure(genes_solution):
	samples_out = 0
	samples_inside = 0
	for sampleID in sample_mutatedGenes:
		genes_in_sample = sample_mutatedGenes[sampleID]
		inside_genes_tmp = genes_solution.intersection(genes_in_sample)
		if len(inside_genes_tmp)>0:
			samples_out += 1
		num_ig_tmp = len(inside_genes_tmp)
		samples_inside += num_ig_tmp
	return float(2*samples_out - samples_inside)


if len(sys.argv)<9:
	print "Usage: python permutationTestDendrix.py mutations_file K minFreqGene number_iterations analyzed_genes_file num_permutations value_tested rank"
	print "mutations_file: input file with mutation matrix (see README.txt for description)"
	print "K: size of the sets to be sampled"
	print "minFreqGene: minimum frequency of mutation for a gene to be considered in the analysis"
	print "number_iterations: number of iterations of the MCMC"
	print "analyzed_genes_file: file with list of analyzed genes (see README.txt for description)"
	print "num_permutations: number of times the permuted datasets to consider in the permutation test"
	print "value_tested: value of the weight for which the permutation test will be run"
	print "rank: rank of the weight tested (value_tested) in the sets_weightOrder_experiment.txt file"
	exit(0)

genes = list()

gene_mutatedSamples = dict()

sample_mut_f = open(sys.argv[1] ,'r')

K = int(sys.argv[2])

mAS_perGene=int(sys.argv[3])

num_iterations = int(sys.argv[4])

analyzed_genes_file = open(sys.argv[5],'r')

all_samples = set()

sample_mutatedGenes = dict()

num_exper = int(sys.argv[6])

statistic = float(sys.argv[7])

rank = int(sys.argv[8])

print "Load genes..."
for line in analyzed_genes_file:
	v =line.split()
	genes.append(v[0])
	gene_mutatedSamples[v[0]]=set()
analyzed_genes_file.close()

print "Loading mutations..."

for line in sample_mut_f:
	v = line.split("\t")
	sampleID = v[0]
	all_samples.add( sampleID )
	sample_mutatedGenes[sampleID]=set()
	for i in range(len(v) - 1):
		gene = v[i+1].strip("\n")
		if gene in genes:
			if gene not in gene_mutatedSamples:
				gene_mutatedSamples[gene]=set()
			gene_mutatedSamples[gene].add(sampleID)
			sample_mutatedGenes[sampleID].add(gene)

sample_mut_f.close()

genes_toRemove = set()
for gene in gene_mutatedSamples:
	if len(gene_mutatedSamples[gene])<mAS_perGene:
		genes_toRemove.add(gene)

for gene in genes_toRemove:
	del gene_mutatedSamples[gene]
	genes.remove(gene)

print len(gene_mutatedSamples.keys())
print "Number of genes: "+str(len(genes))

print "Cleaning sample_mutatedGenes table..."
for sampleID in sample_mutatedGenes:
	for gene in genes_toRemove:
		if gene in sample_mutatedGenes[sampleID]:
			sample_mutatedGenes[sampleID].remove(gene)


random.seed()

num_found = 0

pval_f=open('p_value_dendrix.txt','w')

for exp_n in range(num_exper):
	
	#build random dataset 
	sample_mutatedGenes =dict()
	for gene in gene_mutatedSamples:
		mut = random.sample(all_samples, len(gene_mutatedSamples[gene]))
		gene_mutatedSamples[gene]=set(mut)
		for sample in mut:
			if sample not in sample_mutatedGenes:
				sample_mutatedGenes[sample]=set()
			sample_mutatedGenes[sample].add(gene)
	seen_sols = list()
	solution=random.sample(genes, K)
	genes_set = set(genes)
	
	for iters in range(num_iterations):
		outside_genes = genes_set.difference(solution)
		next_gene = random.sample(outside_genes, 1)
		to_exchange = random.sample( solution, 1)
		next_solution = set(solution).difference(to_exchange).union(next_gene)
		meas_next = measure(next_solution)
		meas_solution = measure(set(solution))
		expon = meas_next - meas_solution
		if expon > 0:
			expon = 0
		prob = min(1.0, math.exp(expon))
		coin = random.random()
		if coin <= prob:
			solution = next_solution
			curr_measure = measure(solution)
			if curr_measure>= statistic:
				solution_to_add = frozenset(solution)
				if solution_to_add not in seen_sols:
					seen_sols.append(solution_to_add)
	if len(seen_sols)>= rank:
		num_found+=1
pval = float(num_found)/float(num_exper)
pval_f.write(str(pval)+"\n")
pval_f.close()
